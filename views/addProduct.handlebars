<div class="container mx-auto my-4 p-6 bg-admin-container shadow-lg rounded-lg w-3/4" id="addProduct">
    <h1 class="text-center text-3xl font-bold mb-6">Create New Product</h1>
    <div class="flex flex-wrap lg:flex-nowrap gap-6">
        <!-- Product Form -->
        <form class="flex-[4_4_0%] space-y-4" id="productForm">
            <!-- Product Name -->
            <div>
                <label for="productName" class="block text-sm font-medium text-gray-700">Product Name:</label>
                <input type="text" id="productName" name="productName"
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>

            <!-- Stock Number -->
            <div>
                <label for="stockNumber" class="block text-sm font-medium text-gray-700">Quantity:</label>
                <input type="number" id="stockNumber" name="stockNumber"
                    class="mt-1 block w-1/3 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>

            <!-- Category -->


            <div>
                <label for="category" class="block text-sm font-medium text-gray-700">Category:</label>

                <!-- Toggle Switch -->
                <div class="flex items-center gap-2 mt-2">
                    <span class="text-gray-700 text-sm">Select</span>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" id="toggleCategory" class="sr-only peer">
                        <div
                            class="w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500 rounded-full peer-checked:bg-blue-500 after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:after:translate-x-full peer-checked:after:border-white">
                        </div>
                    </label>
                    <span class="text-gray-700 text-sm">New</span>
                </div>

                <!-- Dropdown (Default) -->
                <div id="categoryDropdown" class="catDiv" class="mt-3">
                    <select id="categorySelect"
                        class="form-select px-4 py-2 border border-blue-500 text-blue-500 font-semibold rounded-md cursor-pointer w-full" onchange="categorySelected(this.value)">
                        <option value="" selected>Choose A Category</option>
                        {{#each categories}}
                        <option value="{{this.id}}" {{#if (isSelected this.id ../Categories)}}selected{{/if}}>
                            {{this.categoryName}}
                        </option>
                        {{/each}}
                    </select>
                </div>

                <!-- Input Field (Hidden by Default) -->
                <div id="categoryInputField" class="mt-3 hidden">
                    <input type="text" id="category" name="category"
                        class="w-full px-4 py-2 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        placeholder="Enter a new category">
                    <button type="button" id="addCategory"
                        class="mt-2 px-4 py-2 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full">
                        Add New Category
                    </button>
                </div>
            </div>

            <!-- Subcategory -->
            <div>
                <label for="subcategory" class="block text-sm font-medium text-gray-700">SubCategory:</label>
                <div class="flex items-center gap-4 mt-1">
                    <input type="text" id="subcategory" name="subcategory"
                        class="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                    <button type="button" id="addSubCategory"
                        class="px-4 py-2 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                        Add New Sub-Category
                    </button>
                </div>
            </div>

            <!-- Subcategory Section -->
            <div class="subCatDivHeader mt-4"></div>
            <div class="subCatDiv mt-3"></div>

            <!-- Price -->
            <div>
                <label for="price" class="block text-sm font-medium text-gray-700">Price ($):</label>
                <input type="number" id="price" name="price" step="0.01"
                    class="mt-1 block w-1/3 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>

            <!-- Description -->
            <div>
                <label for="description" class="block text-sm font-medium text-gray-700">Description:</label>
                <textarea id="description" name="description" rows="4"
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></textarea>
            </div>

            <!-- Active & Featured Unit -->
            <div class="flex gap-4">
                <div class="flex items-center gap-2">
                    <input type="checkbox" class="hidden peer" id="activeBox" autocomplete="off">
                    <label for="activeBox"
                        class="inline-block px-4 py-2 border border-blue-500 text-blue-500 font-semibold rounded-md cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white peer-checked:border-transparent">
                        Active Unit
                    </label>
                </div>

                <div class="flex items-center gap-2">
                    <input type="checkbox" class="hidden peer" id="featuredbox" autocomplete="off">
                    <label for="featuredbox"
                        class="inline-block px-4 py-2 border border-blue-500 text-blue-500 font-semibold rounded-md cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white peer-checked:border-transparent">
                        Featured Unit
                    </label>
                </div>
            </div>

            <!-- Submit Button -->
            <button type="submit"
                class="w-full px-4 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 subBtn">
                Create Product
            </button>
        </form>

        <!-- Image Uploader -->
        <div class="flex-[1_1_0%] bg-gray-50 rounded-lg shadow-md p-6">
            <form id="uploadForm" enctype="multipart/form-data" class="space-y-4">
                <div>
                    <label for="productImage" class="block text-sm font-medium text-gray-700">Upload Product
                        Images</label>
                    <input type="file" id="productImage" name="productImage" accept="image/*" multiple
                        class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <button type="button" id="uploadBtn"
                    class="w-full px-4 py-2 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Upload Images
                </button>
            </form>

            <div id="thumbnails" class="flex flex-wrap gap-2 mt-4">
                <img src="" alt="Thumbnail 1"
                    class="selectedImg1 h-16 w-16 object-cover rounded-md shadow cursor-pointer hidden"
                    onclick="openImageModal(this)">
                <img src="" alt="Thumbnail 2"
                    class="selectedImg2 h-16 w-16 object-cover rounded-md shadow cursor-pointer hidden"
                    onclick="openImageModal(this)">
                <img src="" alt="Thumbnail 3"
                    class="selectedImg3 h-16 w-16 object-cover rounded-md shadow cursor-pointer hidden"
                    onclick="openImageModal(this)">
                <img src="" alt="Thumbnail 4"
                    class="selectedImg4 h-16 w-16 object-cover rounded-md shadow cursor-pointer hidden"
                    onclick="openImageModal(this)">
                <img src="" alt="Thumbnail 5"
                    class="selectedImg5 h-16 w-16 object-cover rounded-md shadow cursor-pointer hidden"
                    onclick="openImageModal(this)">
            </div>

        </div>
    </div>
</div>

<!-- Modal -->
<div id="imageModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="relative bg-white rounded-lg shadow-lg">
        <button class="absolute top-2 right-2 bg-gray-500 text-white rounded-full p-2"
            onclick="closeImageModal()">&#x2715;</button>
        <img id="modalImage" src="" alt="Large Image" class="rounded-lg max-w-full max-h-[80vh]">
    </div>
</div>

<div id="addProduct" class="add-product-section">

</div>

<script>
    // Activate the addProduct container to show it on the page
    document.getElementById('addProduct').classList.add('active');

    const maxSelections = 5;
    const imageCheckboxes = document.querySelectorAll('.image-checkbox');
    const selectionWarning = document.getElementById('selection-warning');
    const submitButton = document.getElementById('submit-button');

    var checkbox = document.querySelectorAll("input[name=categoryBox]");
    var currCategoryID
    var currSubCategoryID
    var currImgPath = []

    // Select the submit button and input fields from the form
    const sub = document.querySelector(".subBtn");
    const prodName = document.querySelector("#productName");
    const stocknum = document.querySelector("#stockNumber");
    const price = document.querySelector("#price");
    const description = document.querySelector("#description");
    const category = document.querySelector("#category");
    const catDiv = document.querySelector(".catDiv")
    const subcategory = document.querySelector("#subcategory");
    const subCatDiv = document.querySelector(".subCatDiv");
    const subCatDivHeader = document.querySelector('.subCatDivHeader')
    const addCategoryBtn = document.querySelector("#addCategory");
    const addSubCategoryBtn = document.querySelector("#addSubCategory");
    const testBtn = document.querySelector('.testBtn')
    const imgInput = document.querySelector('#imgInput')
    const activeBox = document.querySelector('#activeBox')
    const featuredbox = document.querySelector('#featuredbox')

    var selectedSubCategories = []

    const selectedImg1 = document.querySelector(".selectedImg1")
    const selectedImg2 = document.querySelector(".selectedImg2")
    const selectedImg3 = document.querySelector(".selectedImg3")
    const selectedImg4 = document.querySelector(".selectedImg4")
    const selectedImg5 = document.querySelector(".selectedImg5")

    const allSelectedImages = [selectedImg1, selectedImg2, selectedImg3, selectedImg4, selectedImg5]
    function validateCategory() {
        const categoryDropdown = document.getElementById('categorySelect');
        const categoryInput = document.getElementById('category');

        let isValid = true;

        // Reset previous states
        categoryDropdown.classList.remove("warning");
        categoryInput.classList.remove("warning");
        categoryDropdown.setCustomValidity("");
        categoryInput.setCustomValidity("");

        if (!categoryDropdown.value && !categoryInput.value.trim()) {
            // If no category is selected and no input is provided, show a warning and set invalid state
            categoryDropdown.classList.add("warning");
            categoryInput.classList.add("warning");
            categoryInput.setCustomValidity("Either select a category or enter a new one.");
            isValid = false;
        } else if (!categoryDropdown.value && categoryInput.value.trim()) {
            // If no category is selected but new category name is entered, validate only the input
            isValid = true;
        }

        // Perform validity check to trigger the custom validity message
        categoryDropdown.reportValidity();
        categoryInput.reportValidity();

        // Return true if there's an error, false if valid
        return !isValid;
    }


    function validateSubCategory() {
        console.log(selectedSubCategories.length)
        if ((subcategory.value == null || subcategory.value == "") && (selectedSubCategories.length == 0)) {
            subcategory.placeholder = "subcategory Must Be Filled Or Selected From The Categories Found Below";
            subcategory.classList.add("warning");
            return true;
        }
        else {
            subcategory.placeholder = "";
            return false;
        }
    }

    function validateFourm() {
        let errors = 0;

        if (prodName.value == null || prodName.value == "") {
            errors++;
            prodName.placeholder = "Name Must Be Filled";
            prodName.classList.add("warning");
        } else {
            prodName.classList.remove("warning");
        }

        if (stocknum.value == null || stocknum.value == "" || stocknum.value == 0) {
            errors++;
            stocknum.placeholder = "stocknum Must Be Filled";
            stocknum.classList.add("warning");
        } else {
            stocknum.classList.remove("warning");
        }

        if (validateCategory()) {
            errors++;
            category.placeholder = "Category Must Be Filled Or Selected From The Categories Found Below";
            category.classList.add("warning");
        } else {
            category.classList.remove("warning");
        }

        if (validateSubCategory()) {
            errors++;
            subcategory.placeholder = "Sub-category Must Be Filled Or Selected From Sub-categories Found Below";
            subcategory.classList.add("warning");
        } else {
            subcategory.classList.remove("warning");
        }

        if (price.value == null || price.value == "" || price.value == 0) {
            errors++;
            price.placeholder = "Price Must Be Filled";
            price.classList.add("warning");
        } else {
            price.classList.remove("warning");
        }

        if (description.value == null || description.value == "") {
            errors++;
            description.placeholder = "Description Must Be Filled";
            description.classList.add("warning");
        } else {
            description.classList.remove("warning");
        }
        return errors;
    }

    const categorySelected = async (id) => {
        if (id) {
            currCategoryID = id; // Set the current category ID

            // Fetch subcategories when a category is selected
            const response = await fetch("/getSubCategories/" + id, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            });

            if (response.ok) {
                const data = await response.json(); // Parse the JSON response
                console.log("Got Sub Categories: ", data);
                DisplaySubCategories(data); // Display the subcategories
            } else {
                alert(response.statusText);
            }
        } else {
            currCategoryID = null; // Reset the current category ID
            subCatDiv.innerHTML = ''; // Clear subcategories display
        }
    };

    function DisplaySubCategories(subs) {
        // First, remove all existing buttons in subCatDiv
        subCatDiv.innerHTML = '';
        subCatDivHeader.innerHTML = '';

        // Create the card
        const displayDiv = document.createElement('div');
        displayDiv.classList.add('card', 'mb-3', 'm-2', 'p-2', 'bg-info', 'bg-opacity-25');

        // Product message
        const ourProds = document.createElement('m-2', 'p-2', 'fw-semibold');
        ourProds.innerText = 'Please choose from listed Sub-Categories or create one; if none available.';

        // Append message to card
        displayDiv.appendChild(ourProds);


        // Loop through the subs array to generate the input/label HTML
        subs.forEach(sub => {

            // Create input element
            const input = document.createElement('input');
            input.type = 'checkbox';
            input.classList.add('btn-check');
            input.id = `btncheckSub${sub.id}`;
            input.name = 'subCategories';
            input.value = sub.id;
            input.autocomplete = 'off';


            // Create label element
            const label = document.createElement('label');
            label.classList.add('btn', 'btn-outline-primary', 'me-1');
            label.setAttribute('for', `btncheckSub${sub.id}`);
            label.innerText = sub.subCategoryName;

            // Append the input and label to subCatDiv
            subCatDivHeader.appendChild(displayDiv);
            subCatDiv.appendChild(input);
            subCatDiv.appendChild(label);
        });
    }

    function DisplaySubCategory(sub) {
        // Ensure subCatDiv is defined
        if (!subCatDiv) {
            console.error('subCatDiv not found');
            return;
        }

        // Create the checkbox input
        const input = document.createElement('input');
        input.type = 'checkbox';
        input.classList.add('btn-check');
        input.id = `btncheckSub${sub.id}`;
        input.name = 'subCategories';
        input.value = sub.id;
        input.autocomplete = 'off';
        input.checked = true;

        // Create label element
        const label = document.createElement('label');
        label.classList.add('btn', 'btn-outline-primary', 'me-1');
        label.setAttribute('for', `btncheckSub${sub.id}`);
        label.innerText = sub.subCategoryName;
        

        // Append elements to subCatDiv
        subCatDiv.appendChild(input);
        subCatDiv.appendChild(label);
    }
    function DisplayNewCategory(cat) {
        // Get elements safely
        const dropdownContainer = document.getElementById('categoryDropdown');
        const inputFieldContainer = document.getElementById('categoryInputField');
        const toggleSwitch = document.getElementById('toggleCategory');
        const select = document.querySelector('#categoryDropdown select'); // Corrected selector

        // Ensure the dropdown exists
        if (!select) {
            console.error("Dropdown select element not found.");
            return;
        }

        // Ensure the new category has valid data
        if (!cat || !cat.id || !cat.categoryName) {
            console.error("Invalid category data:", cat);
            return;
        }

        // Check if the option already exists to prevent duplicates
        if ([...select.options].some(option => option.value === cat.id)) {
            console.warn("Category already exists in the dropdown.");
            return;
        }

        // Create a new option element for the new category
        const option = document.createElement('option');
        option.value = cat.id;
        option.textContent = cat.categoryName;

        // Append the new option to the dropdown menu
        select.appendChild(option);

        // Auto-select the newly added category
        select.value = cat.id;
        if (typeof categorySelected === "function") {
            categorySelected(select.value);
        } else {
            console.warn("categorySelected function is not defined.");
        }

        // Switch back to the dropdown mode
        if (dropdownContainer) dropdownContainer.classList.remove("hidden");
        if (inputFieldContainer) inputFieldContainer.classList.add("hidden");
        if (toggleSwitch) toggleSwitch.checked = false;
    }



    // Function to handle the product submission
    const newProd = async (e) => {
        // Prevent the default form submission behavior
        e.preventDefault();
        var subcheckbox = document.querySelectorAll("input[name=subCategories]");
        var imgPath
        for (i = 0; i < subcheckbox.length; i++) {
            if (subcheckbox[i].checked) {
                selectedSubCategories.push(subcheckbox[i].value)
            }
        }

        if (selectedSubCategories.length > 0) {
            //This function should only run when there are sub categories. This is how it will be checked when required fields are entered
            console.log(selectedSubCategories.length)
        }
        console.log(currImgPath)

        if (currImgPath.length > 0) {
            imgPath = currImgPath[0]
            for (let i = 0; i < 4; i++) {
                currImgPath.push(null)
            }
        }
        else {
            imgPath = '/assets/imgs/PlaceHolder.png'
            for (let i = 0; i < 5; i++) {
                currImgPath.push(null)
            }
        }
        let theErrors = validateFourm();
        console.log(theErrors);



        if (theErrors === 0) {
            // Create a message object with product details
            let newMessage = {
                productName: prodName.value,
                quantity: stocknum.value,
                price: price.value,
                description: description.value,
                image: imgPath,
                productURL: "www.testing.com",
                activeUnit: activeBox.checked,
                featured: featuredbox.checked,
                image2: currImgPath[1],
                image3: currImgPath[2],
                image4: currImgPath[3],
                image5: currImgPath[4],

            };

            // Send a POST request to submit the new product data
            const response = await fetch("/admin/addproduct/submit", {
                method: "POST",
                body: JSON.stringify(newMessage),
                headers: { "Content-Type": "application/json" }, // Specify the content type
            });

            // Check if the response is okay (status in the range 200-299)
            if (response.ok) {
                const data = await response.json(); // Parse the JSON response
                console.log("Product created:", data); // Log the created product details
                associateCategoryWithProduct(currCategoryID, data.id); // Proceed to create/associate the category for the product

                // Trigger the off-canvas to show the product view
                // const offCanvasElement = document.getElementById("currAddedProd");
                // offCanvasElement.classList.remove("invisible");
            } else {
                alert(response.statusText); // Alert the user if the response was not okay
            }
        }
        else {
            alert("PLease enter all the correct feilds to add your product"); // Alert the user if the response was not okay
        }
    };

    // Function to handle category creation or association
    const newCategory = async () => {
        try {
            // Check if the category value is null or empty
            if (!category.value && !currCategoryID) {
                alert("Please enter a category name."); // Alert the user
                return; // Exit the function if the category is invalid
            }

            // Create an object with category information
            let categoryInfo = {
                categoryName: category.value,
            };

            // If the category doesn't exist, create a new one
            const response = await fetch("/admin/addproduct/newCategory", {
                method: "POST",
                body: JSON.stringify(categoryInfo),
                headers: { "Content-Type": "application/json" },
            });

            if (response.ok) {
                const data = await response.json(); // Parse the JSON response
                console.log("Made new category:", data);
                DisplayNewCategory(data); // Call the function to display the new category
            } else {
                alert(response.statusText); // Alert the user if category creation failed
            }
        } catch (error) {
            console.error("Error creating new category:", error); // Log the error for debugging

        }
    };
    // Function to handle subcategory creation or association
    const newSubCategory = async () => {
        try {
            if (subcategory.value) {

                // If subcategory doesn't exist, create a new one
                const subCategoryInfo = {
                    subCategoryName: subcategory.value,
                    category_id: currCategoryID,
                };

                console.log("Creating new subcategory:", subCategoryInfo);

                const response = await fetch("/admin/addproduct/newSubCategory", {
                    method: "POST",
                    body: JSON.stringify(subCategoryInfo),
                    headers: { "Content-Type": "application/json" },
                });

                if (response.ok) {
                    const data = await response.json(); // Parse the JSON response
                    DisplaySubCategory(data);
                    console.log("New subcategory created");

                } else {
                    const errorResponse = await response.text();
                    console.error("Failed to create subcategory:", response.statusText, errorResponse);
                    alert(`Failed to create subcategory: ${response.statusText}`); // Alert on failure
                }
            }
            else {
                if (subcategory.value == null) {
                    alert(`Value of the Sub-Category: ${subcategory.value}`); // Alert on failure
                }

                alert(`Something is wrong with the value of the Sub-Category: ${subcategory.value} `); // Alert on failure

            }

        } catch (error) {
            console.error("Error during subcategory creation:", error);
            alert("An error occurred while creating the subcategory."); // Alert on error
        }
    };

    // Function to associate the selected category with the product
    const associateCategoryWithProduct = async (categoryID, productID) => {
        try {
            // Prepare the association information
            const associationInfo = {
                category_id: categoryID,
                product_id: productID,
            };

            // Make the POST request to associate the category with the product
            const response = await fetch("/admin/addproduct/associateCategoryWithProduct", {
                method: "POST",
                body: JSON.stringify(associationInfo),
                headers: { "Content-Type": "application/json" },
            });

            if (response.ok) {
                const data = await response.json(); // Parse the JSON response
                console.log("Successfully associated category with product:", data);
                associateSubCategoryToProduct(productID)
            } else {
                const errorData = await response.text(); // Capture the error response
                console.error("Error associating category with product:", response.status, errorData);
                alert("Failed to associate category with product."); // Alert on failure
            }
        } catch (error) {
            console.error("Error in associateCategoryWithProduct:", error);
            alert("An unexpected error occurred while associating the category with the product."); // Alert on unexpected error
        }
    };

    // Function to associate subcategories with the new product
    const associateSubCategoryToProduct = async (productID) => {
        for (var i = 0; i < selectedSubCategories.length; i++) {
            try {
                // Prepare the subcategory information for association
                const associationInfo = {
                    sub_category_id: selectedSubCategories[i],
                    product_id: productID, // Assuming you also want to associate with the product
                };

                // Make the POST request to associate subcategory with product
                const response = await fetch("/admin/addproduct/associateSubCategoryToProduct", {
                    method: "POST",
                    body: JSON.stringify(associationInfo),
                    headers: { "Content-Type": "application/json" },
                });

                if (response.ok) {
                    // Parse the response data
                    const data = await response.json();
                    console.log("Successfully associated subcategory with product:", data);
                    //showProduct();
                    alert('product successfully created!')
                    location.reload()
                } else {
                    // Handle non-OK responses
                    alert(`Failed to associate: ${response.statusText}`); // Alert on failure
                }
            } catch (error) {
                // Catch and log any errors that occur during the fetch request
                console.error("Error associating subcategory with product:", error);
            }
        }

    };

    function Blur(targetDiv) {
        targetDiv.classList.add('blur');
    }

    function NavTo(targetDiv) {
        targetDiv.scrollIntoView({ behavior: "smooth" });
    }

    function showProduct() {
        const addProduct = document.getElementById('addProduct');
        const uploadImg = document.getElementById('uploadImg');

        Blur(addProduct);
        Blur(uploadImg);
        const imgTarget = document.querySelector('#imgTarget');

        // Create the container for the picture
        const divContainer = document.createElement('div');
        divContainer.classList.add('container', 'z-1', 'position-absolute', 'top-50', 'start-50', 'translate-middle');

        // Create the card
        const divCard = document.createElement('div');
        divCard.classList.add('card', 'mb-3');

        // Create the card body
        const divCardBody = document.createElement('div');
        divCardBody.classList.add('card-body');

        // Create the layout organization
        const divJustifyContent = document.createElement('div');
        divJustifyContent.classList.add('d-flex', 'justify-content-evenly');

        // Create the card title
        const h4Created = document.createElement('h4');
        h4Created.classList.add('card-title');
        h4Created.innerText = 'Your Added Product: '

        // Create the product image
        const imgPreview = document.createElement('img');
        imgPreview.src = currImgPath[0]; // Path of the uploaded image
        imgPreview.alt = 'Uploaded Product Image';
        imgPreview.classList.add('img-fluid', 'rounded', 'mb-3', 'maxOutHeight');

        // Create the product details section
        const divDetails = document.createElement('div');
        divDetails.classList.add('product-details');

        // Product name
        const h5ProductName = document.createElement('h5');
        h5ProductName.classList.add('product-name');
        h5ProductName.innerText = 'Product Name: ' + prodName.value; // Replace with actual name

        // Product price
        const ProductPrice = document.createElement('p');
        ProductPrice.classList.add('product-price');
        ProductPrice.innerText = 'Price: $' + price.value; // Replace with actual price

        // Product description
        const ProductDescription = document.createElement('p');
        ProductDescription.classList.add('product-description');
        ProductDescription.innerText = 'Description: ' + description.value; // Replace with actual description

        const productQuanity = document.createElement('p');
        productQuanity.classList.add('product-quanity');
        productQuanity.innerText = 'Quanity: ' + stocknum.value; // Replace with actual description

        const exitBtn = document.createElement('a');
        exitBtn.classList.add('btn-primary')
        exitBtn.innerText = 'Add Another Product'
        exitBtn.href = '/admin/addProduct'

        // Append elements to the DOM in order
        divContainer.appendChild(divCard);
        divCard.appendChild(divJustifyContent);
        divJustifyContent.appendChild(imgPreview);
        divJustifyContent.appendChild(divCardBody);
        divCardBody.appendChild(h4Created);
        divCardBody.appendChild(divDetails);
        divDetails.appendChild(h5ProductName);
        divDetails.appendChild(ProductPrice);
        divDetails.appendChild(ProductDescription);
        divDetails.appendChild(productQuanity);
        divDetails.appendChild(exitBtn)

        // Append the container to the target
        imgTarget.appendChild(divContainer);

        // Navigate to the product addition page if needed
        NavTo(addProduct);
    }

    function imageTest() {
        console.log(imgInput.value)
        console.log("after Value")
        console.log(imgInput)
    }

    const form = document.getElementById('uploadForm');
    const uploadBtn = document.querySelector('#uploadBtn')

    uploadBtn.addEventListener('click', async function (event) {
        event.preventDefault(); // Prevent form from submitting the traditional way
        console.log("Imhere")

        const formData = new FormData();
        const fileInput = document.getElementById('productImage');

        if (fileInput.files.length === 0) {
            alert('Please select an image file to upload.');
            return;
        }
        if (fileInput.files.length > maxSelections - currImgPath.length) {
            alert('You can only select a maximum of 5 images.');
            return;
        }

        for (const file of fileInput.files) {
            formData.append('productImages', file);
        }

        try {
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                alert('Image uploaded successfully!');
                // Use result.path to reference the uploaded image
                console.log(result.paths); // Add this to your img table or product modal

                // Example: You can update a hidden input field or add the path to a modal form
                const imagePath = result.paths;
                console.log(result, "here is path:", result.paths)
                document.getElementById('imageFilePath').value = imagePath; // Store in a hidden field for later reference
                // After successful upload, show the uploaded image in the modal
                for (let i = 0; i < 5; i++) {
                    if (i < imagePath.length) {
                        currImgPath.push(imagePath[i])
                    }
                }
                console.log(currImgPath)
                refreshThumbnails()

            } else {
                alert('Failed to upload image.');
            }
        } catch (error) {
            console.error('Error uploading image:', error);
            alert('An error occurred while uploading the image.');
        }
    });

    // Attach the event listener to the submit button to handle product creation
    sub.addEventListener("click", newProd);
    addCategoryBtn.addEventListener('click', async (e) => {
        e.preventDefault(); // Prevent page reload
        if (!validateCategory())
            await newCategory();
    });

    addSubCategoryBtn.addEventListener('click', async (e) => {
        e.preventDefault(); // Prevent page reload
        if (!validateSubCategory())
            await newSubCategory();
    });






    function refreshThumbnails() {
        for (i = 0; i < currImgPath.length; i++) {
            if (currImgPath[i] != null) {
                allSelectedImages[i].src = currImgPath[i]
                allSelectedImages[i].classList.remove('hidden');
            }
        }
    }



    function openImageModal(img) {
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        modalImage.src = img.src;
        modal.classList.remove('hidden');
    }

    function closeImageModal() {
        const modal = document.getElementById('imageModal');
        modal.classList.add('hidden');
    }




    // Event listener to ensure only 5 images can be selected
    imageCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            const checkedBoxes = document.querySelectorAll('.image-checkbox:checked');
            if (checkedBoxes.length > maxSelections - currImgPath.length) {
                checkbox.checked = false;
                selectionWarning.style.display = 'block';
            } else {
                selectionWarning.style.display = 'none';
            }
        });
    });


    document.getElementById("toggleCategory").addEventListener("change", function () {
        const dropdown = document.getElementById("categoryDropdown");
        const inputField = document.getElementById("categoryInputField");

        if (this.checked) {
            dropdown.classList.add("hidden");
            inputField.classList.remove("hidden");
        } else {
            dropdown.classList.remove("hidden");
            inputField.classList.add("hidden");
        }
    });

</script>
<input type="hidden" id="imageFilePath" name="imageFilePath">

<style>
    .active {
        display: block;
    }
</style>